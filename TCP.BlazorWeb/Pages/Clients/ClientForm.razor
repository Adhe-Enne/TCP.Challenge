@page "/ClientForm"
@using System.ComponentModel.DataAnnotations;
@using System.Text.RegularExpressions;
@using Core.Abstractions;
@using TCP.Model.Dto;
@using MudBlazor;
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@inject TCP.BlazorWeb.Services.IClientService _clientService;

<h3>Nuevo Cliente</h3>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" Model="@entity"  @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Razon Social" @bind-Value="@entity.CompanyName" HelperText="Ingrese Razon Social" Required="true" RequiredError="Razon Social es obligatorio!" />
                <MudTextField T="string" Label="CUIT" @bind-Value="@entity.CUIT" HelperText="Ingrese CUIT" @ref="pwField1" Required="true" RequiredError="CUIT Obligatorio!" />
                <MudTextField T="string" Label="Direccion" @bind-Value="@entity.Adress" HelperText="Ingrese Direccion" InputType="InputType.Text" />
                <MudTextField T="string" Label="Email" @bind-Value="@entity.Email" HelperText="Ingrese Email" Required="true" RequiredError="Email es obligatorio!" Validation="@(new EmailAddressAttribute() {ErrorMessage = "Email Ingresado no es Valido!"})" />
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Href="/" Variant="Variant.Filled" Color="Color.Error">Cancelar</MudButton>
            <MudButton @onclick="Save" Variant="Variant.Filled" Color="Color.Success">Guardar</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

<style>
    .blur {
        backdrop-filter: blur(10px);
    }
</style>

@code 
{
    public ClientCreateDto entity { get; set; } = new();
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form = new();
    public bool ShowDialog { get; set; }

    public IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private async Task Save()
    {
        var options = new DialogOptions { ClassBackground = "blur" };
        var parameters = new DialogParameters<GenericDialog>();
        parameters.Add(x => x.ContentText, "¿Estás seguro de que quieres guardar el registro?");
        parameters.Add(x => x.ButtonText, "Guardar");
        parameters.Add(x => x.Color, Color.Primary);
        var dialog = _dialogService.Show<GenericDialog>("Confirmación", parameters, options);
        var result = await dialog.Result;

        if (result.Data is bool && (bool)result.Data)
        {
            dialog.Close();

            var response = await _clientService.Save(entity);

            parameters = new DialogParameters<GenericDialog>();
            parameters.Add(x => x.ContentText, $"La respuesta del servicio es: {response.Message}");
            parameters.Add(x => x.ButtonText, "Cerrar");
            parameters.Add(x => x.Color, response.HasError ? Color.Error : Color.Success);

            dialog = _dialogService.Show<GenericDialog>(response.HasError ? Constants.Messages.ERROR_DIALOG : Constants.Messages.SUCCESS_DIALOG, parameters, options);
            result = await dialog.Result;

            if (!response.HasError)
            { 
                _snackbar.Add("¡Registro Actualizado con Exito!", Severity.Success);
                entity = new();
            }
            else
                _snackbar.Add("¡No se pudo Actualizar Registro!", Severity.Error);

        }
    }
}